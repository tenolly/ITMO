@startuml

package utils {
    package commands {
        package types {
            interface OnlyForServer {}
        }

        package exceptions {
            class TerminateException {}
        }

        class Argument {
            - name : String
            - decription : String
            - value : T
            - castToType : Function<String,T>
            + Argument(name : String, decription : String, castToType : Function<String,T>)
            + setValue(value : String) : void
            + getValue() : T
            + getName() : String
            + getDescription() : String
        }

        class Command {
            - name : String
            - description : String
            - arguments : ArrayList<Argument<?>>
            # enviroment : Enviroment
            + Command(name : String, description : String)
            + setEnviroment(enviroment : Enviroment) : Command
            # initArgs(args : Argument<?>) : void
            + getArgs() : ArrayList<Argument<?>>
            + getName() : String
            + getDescription() : String
            + {abstract} execute(args : HashMap<String,?>) : ArrayList<String>
        }
    }

    package handlers {
        class CommandHandler{
            - commands : HashMap<String,Command>
            + add(command : Command) : CommandHandler
            + getCommand(name : String) : Command
            + getAllCommands() : Collection<Command>
        }

        class Enviroment{
            + executeCommand(command : Command, args : HashMap<String,?>) : String
        }
    }

    package request {
        class CommandRequest{
            - status : RequestStatus
            - response : String
            - command : String
            - args : ArrayList<Argument<?>>
            - argsCache : HashMap<String,Object>
            + CommandRequest(command : String)
            + getCommand() : String
            + setStatus(status : RequestStatus) : void
            + getStatus() : RequestStatus
            + setResponse(response : String) : void
            + getResponse() : String
            + getArgs() : ArrayList<Argument<?>>
            + addArg(argument : Argument<?>) : void
            + addArgs(arguments : ArrayList<Argument<?>>) : void
            + getArgsCache() : HashMap<String,Object>
            + setArgsCache(cache : HashMap<String,Object>) : void
        }

        enum RequestStatus{
            FULLFILED
            PENDING
            REJECTED
        }
    }

    package caster {
        class CasterException {
            + CasterException(String string)
        }

        class CasterUtil {
            + static final Function<String, String> castToString
        }
    }

    package database {
        package components.vehicle {
            class Coordinates {
                - double x
                - float y
                + Coordinates(double x, float y)
                + double getX()
                + float getY()
                + void setX(double x)
                + void setY(float y)
            }

            class Caster {
                + static final Function<String, Double> castToX
                + static final Function<String, Float> castToY
            }
                
            class Validator {
                + static String xHumanIntelligibleConditions
                + static void validateX(Double x)
                + static String yHumanIntelligibleConditions
                + static void validateY(Float y)
            }

            Coordinates +-- Caster
            Coordinates +-- Validator

            enum FuelType {
                KEROSENE
                NUCLEAR
                ANTIMATTER
            }
        }

        class User {
            - Long id
            - String username
            - String hashedPassword

            + User()
            + User(String username, String password)
            
            + Long getId()
            + String getUsername()
            + String getHashedPassword()
        }

        class Vehicle {
            - long id
            - String name
            - Coordinates coordinates
            - java.time.ZonedDateTime creationDate
            - Float enginePower
            - Integer numberOfWheels
            - float fuelConsumption
            - FuelType fuelType

            - static long currentMaxId
            - static Map<String, Consumer<String>> mutableFields

            + Vehicle(String name, Coordinates coordinates, Float enginePower, Integer numberOfWheels, float fuelConsumption, FuelType fuelType)
            + static Set<String> getMutableFields()
            + void setFieldByName(String name, String value)
            + long getId()
            + String getName()
            + Coordinates getCoordinates()
            + java.time.ZonedDateTime getCreationDate()
            + Float getEnginePower()
            + Integer getNumberOfWheels()
            + float getFuelConsumption()
            + FuelType getFuelType()
            + void setName(String name)
            + void setCoordinates(Coordinates coordinates)
            + void setEnginePower(Float enginePower)
            + void setNumberOfWheels(Integer numberOfWheels)
            + void setFuelConsumption(float fuelConsumption)
            + void setFuelType(FuelType fuelType)
            + static void setCurrentMaxId(long currentMaxId)
            + String toString()
            + int compareTo(Vehicle v)
        }

        class Caster {
            + static final Function<String, Long> castToId
            + static final Function<String, String> castToName
            + static final Function<String, Float> castToEnginePower
            + static final Function<String, Integer> castToNumberOfWheels
            + static final Function<String, Float> castToFuelConsumption
            + static final Function<String, FuelType> castToFuelType
        }

        class Validator {
            + static String nameHumanIntelligibleConditions
            + static void validateName(String name)
            + static void validateCoordinates(Coordinates coordinates)
            + static String enginePowerHumanIntelligibleConditions
            + static void validateEnginePower(Float enginePower)
            + static String numberOfWheelsHumanIntelligibleConditions
            + static void validateNumberOfWheels(Integer numberOfWheels)
            + static String fuelConsumptionHumanIntelligibleConditions
            + static void validateFuelConsumption(float fuelConsumption)
            + static ArrayList<String> fuelTypeValues
            + static String fuelTypeHumanIntelligibleConditions
            + static void validateFuelType(FuelType fuelType)
        }

        Vehicle +-- Caster
        Vehicle +-- Validator
    }
}

@enduml