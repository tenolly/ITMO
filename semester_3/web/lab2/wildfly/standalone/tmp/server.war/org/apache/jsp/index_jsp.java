/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: WildFly 33.0.1.Final (WildFly Core 25.0.1.Final) - 2.3.15.Final
 * Generated at: 2024-09-16 21:04:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private jakarta.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
        throws java.io.IOException, jakarta.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(jakarta.servlet.http.HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JBWEB004248: JSPs only permit GET POST or HEAD");
return;
}

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      response.addHeader("X-Powered-By", "JSP/3.1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ru-RU\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Лабораторная работа №2</title>\r\n");
      out.write("    <script src=\"static/js/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"static/css/index.css\">\r\n");
      out.write("    <link rel=\"icon\" type=\"image/jpg\" href=\"static/media/favicon.ico\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"content-container\">\r\n");
      out.write("        <header class=\"header\">\r\n");
      out.write("            <div class=\"header-container\">\r\n");
      out.write("                <div>Пышкин Никита Сергеевич P3213</div>\r\n");
      out.write("                <div></div>\r\n");
      out.write("                <div>409429</div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </header>\r\n");
      out.write("        <main class=\"main\">\r\n");
      out.write("            <div class=\"main__left-column\">\r\n");
      out.write("                <div class=\"main__block\">\r\n");
      out.write("                    <img class=\"graph\" src = \"media/graph.svg\"/>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"main__block\">\r\n");
      out.write("                    <div class=\"row\">Параметры</div>\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <div>Выберете X:</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"-3\">-3</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"-2\">-2</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"-1\">-1</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"0\">0</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"1\">1</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"2\">2</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"3\">3</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"4\">4</div>\r\n");
      out.write("                        <div><input name=\"x-value\" type=\"radio\" value=\"5\">5</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <div>Выберете Y:</div>\r\n");
      out.write("                        <input name=\"y-value\" id=\"y-input\" type=\"text\" placeholder=\"значение от -5 до 3\" maxlength=\"7\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <div>Выберете R:</div>\r\n");
      out.write("                        <div><input name=\"r-value\" type=\"checkbox\" value=\"1\">1.0</div>\r\n");
      out.write("                        <div><input name=\"r-value\" type=\"checkbox\" value=\"1.5\">1.5</div>\r\n");
      out.write("                        <div><input name=\"r-value\" type=\"checkbox\" value=\"2\">2.0</div>\r\n");
      out.write("                        <div><input name=\"r-value\" type=\"checkbox\" value=\"2.5\">2.5</div>\r\n");
      out.write("                        <div><input name=\"r-value\" type=\"checkbox\" value=\"3\">3.0</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <button class=\"main__block submit_button\" style=\"margin-bottom: 15px;\" id=\"submit\">Проверить</button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <div class=\"result-title\">Результат</div>\r\n");
      out.write("                <div class=\"result-container\">\r\n");
      out.write("                    <div style=\"border-top: 1px solid #000000;\">X</div>\r\n");
      out.write("                    <div style=\"border-top: 1px solid #000000;\">Y</div>\r\n");
      out.write("                    <div style=\"border-top: 1px solid #000000;\">R</div>\r\n");
      out.write("                    <div style=\"border-top: 1px solid #000000;\">Попал?</div>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"result-container\" id=\"result\"></div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </main>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script>\r\n");
      out.write("        $(\"input[type='checkbox']\").on(\"change\", function() {\r\n");
      out.write("            $(\"input[name='\" + this.name + \"']\").not(this).prop(\"checked\", false);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        $(\"#submit\").on(\"click\", function() {\r\n");
      out.write("            let jsonData = {\r\n");
      out.write("                \"x\": $(\"input[name='x-value']:checked\").val(),\r\n");
      out.write("                \"y\": $(\"input[name='y-value']\").val(),\r\n");
      out.write("                \"r\": $(\"input[name='r-value']:checked\").val()\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            if (isNaN(+jsonData.x) || isNaN(+jsonData.y) || isNaN(+jsonData.r) || +jsonData.y < -5 || +jsonData.y > 3) {\r\n");
      out.write("                alert(\"Некорректные данные\");\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: \"/fcgi-bin/?\" + $.param(jsonData),\r\n");
      out.write("                type: \"GET\",\r\n");
      out.write("                dataType: \"json\",\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                    if (response.error != null) {\r\n");
      out.write("                        alert(\"Ответ от сервера не получен\");\r\n");
      out.write("                        console.log(response);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        if (response.result) {\r\n");
      out.write("                            $(\"#result\").prepend($(\"<div></div>\").text(\"Да\"));\r\n");
      out.write("                        } else {\r\n");
      out.write("                            $(\"#result\").prepend($(\"<div></div>\").text(\"Нет\"));\r\n");
      out.write("                        }\r\n");
      out.write("                        $(\"#result\").prepend($(\"<div></div>\").text(jsonData.r));\r\n");
      out.write("                        $(\"#result\").prepend($(\"<div></div>\").text(jsonData.y));\r\n");
      out.write("                        $(\"#result\").prepend($(\"<div></div>\").text(jsonData.x));\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(xhr, status, error) {\r\n");
      out.write("                    alert(error)\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        })\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new jakarta.servlet.ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
